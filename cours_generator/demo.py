#!/usr/bin/env python3
"""
Script de d√©monstration du g√©n√©rateur de cours
Teste tous les composants sans faire d'appels √† Ollama
"""

import json
import asyncio
from pathlib import Path

from parsers.md_parser import FrancaisParser
from generators.html_generator import HTMLGenerator
from generators.prompt_templates import PromptTemplates


async def demo_parser():
    """D√©monstration du parser"""
    print("="*60)
    print("üîç D√âMONSTRATION DU PARSER")
    print("="*60)
    
    parser = FrancaisParser()
    
    try:
        # Parse du fichier francais_all.md
        data = parser.parse_file('../francais_all.md')
        stats = parser.get_statistics(data)
        
        print(f"\nüìä STATISTIQUES:")
        print(f"   ‚Ä¢ Total d'√©l√©ments: {stats['total_items']}")
        print(f"   ‚Ä¢ Existants: {stats['existing_items']}")
        print(f"   ‚Ä¢ √Ä cr√©er: {stats['to_create_items']}")
        print(f"   ‚Ä¢ Cat√©gories: {stats['categories']}")
        
        print(f"\nüìÇ D√âTAIL PAR CAT√âGORIE:")
        for category, items in data.items():
            print(f"\n   {category.upper()} ({len(items)} √©l√©ments):")
            for item in items[:3]:  # Afficher les 3 premiers
                status_emoji = "‚úÖ" if item.status == "exists" else "üîÑ"
                print(f"      {status_emoji} {item.name}")
            if len(items) > 3:
                print(f"      ... et {len(items) - 3} autres")
        
        print(f"\n‚úÖ Parser test√© avec succ√®s!")
        return data
        
    except Exception as e:
        print(f"‚ùå Erreur du parser: {e}")
        return None


def demo_prompts():
    """D√©monstration des templates de prompts"""
    print("\n" + "="*60)
    print("üìù D√âMONSTRATION DES PROMPTS")
    print("="*60)
    
    templates = PromptTemplates()
    
    # Test avec diff√©rents types d'√©l√©ments
    test_items = [
        {'category': 'auteur', 'item': {'name': 'Victor Hugo'}},
        {'category': 'mouvement', 'item': {'name': 'Romantisme'}},
        {'category': 'notions', 'item': {'name': 'M√©taphore'}},
        {'category': 'methodes', 'item': {'name': 'Commentaire'}},
    ]
    
    for test in test_items:
        print(f"\nüìã CAT√âGORIE: {test['category'].upper()}")
        print(f"   √âl√©ment: {test['item']['name']}")
        
        prompt = templates.get_prompt(test['category'], test['item'])
        print(f"   Longueur: {len(prompt)} caract√®res")
        print(f"   D√©but: {prompt[:100]}...")
    
    print(f"\n‚úÖ Templates de prompts test√©s!")


def demo_html_generator():
    """D√©monstration du g√©n√©rateur HTML"""
    print("\n" + "="*60)
    print("üé® D√âMONSTRATION DU G√âN√âRATEUR HTML")
    print("="*60)
    
    generator = HTMLGenerator({'base_template': 'templates/base_template.html'})
    
    # Contenu simul√© g√©n√©r√© par l'IA
    mock_content = {
        'pr√©sentation express': 'Moli√®re est le ma√Ætre incontest√© de la com√©die fran√ßaise! Ce g√©nie du th√©√¢tre a r√©volutionn√© la sc√®ne avec ses personnages inoubliables et sa critique sociale f√©roce.',
        'rep√®res cl√©s': '1622: Naissance de Jean-Baptiste Poquelin\n1643: Cr√©ation de l\'Illustre Th√©√¢tre\n1659: Premier succ√®s avec "Les Pr√©cieuses ridicules"\n1666: "Le Misanthrope"\n1673: Mort en sc√®ne',
        '≈ìuvres majeures': 'Tartuffe (1664) - Critique la fausse d√©votion\nDom Juan (1665) - Le libertin face √† la mort\nLe Misanthrope (1666) - L\'homme qui d√©teste les hommes\nL\'Avare (1668) - Harpagon et sa cassette\nLe Bourgeois gentilhomme (1670) - M. Jourdain fait de la prose',
        'style et th√®mes': 'Moli√®re cr√©e la com√©die de caract√®re avec des personnages aux d√©fauts exag√©r√©s. Il respecte les r√®gles classiques tout en les dynamitant de l\'int√©rieur. Son secret: faire rire tout en faisant r√©fl√©chir!',
        'citations c√©l√®bres': '"Il faut manger pour vivre et non pas vivre pour manger"\n"On ne meurt qu\'une fois, et c\'est pour si longtemps!"\n"Le devoir d\'une femme est de para√Ætre joyeuse"',
        'anecdotes': 'Moli√®re a √©pous√© Armande B√©jart, qui √©tait soit la s≈ìur, soit la fille de sa ma√Ætresse! Il crachait du sang le soir de sa mort mais a continu√© √† jouer jusqu\'au bout. "Tartuffe" a √©t√© interdite 5 ans car trop subversive.'
    }
    
    # Test avec un auteur
    item = {
        'name': 'moliere',
        'url': 'https://upload.wikimedia.org/wikipedia/commons/1/17/Moliere.jpg'
    }
    
    # Simulation du contenu g√©n√©r√©
    generated_content = '\n'.join([
        f"**{key}**\n{value}\n"
        for key, value in mock_content.items()
    ])
    
    html = generator.generate_html('auteur', item, generated_content)
    
    # Sauvegarde du fichier de d√©monstration
    demo_path = Path('output/demo_moliere.html')
    demo_path.parent.mkdir(exist_ok=True)
    
    with open(demo_path, 'w', encoding='utf-8') as f:
        f.write(html)
    
    print(f"\nüìÑ HTML g√©n√©r√©:")
    print(f"   ‚Ä¢ Longueur: {len(html)} caract√®res")
    print(f"   ‚Ä¢ Sections: {len(mock_content)} sections")
    print(f"   ‚Ä¢ Fichier sauv√©: {demo_path}")
    print(f"   ‚Ä¢ Ouvrir avec: firefox {demo_path}")
    
    print(f"\n‚úÖ G√©n√©rateur HTML test√©!")


def demo_config():
    """D√©monstration de la configuration"""
    print("\n" + "="*60)
    print("‚öôÔ∏è D√âMONSTRATION DE LA CONFIGURATION")
    print("="*60)
    
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print(f"\nüìã Configuration actuelle:")
        print(f"   ‚Ä¢ Mod√®le Ollama: {config['ollama']['model']}")
        print(f"   ‚Ä¢ URL Ollama: {config['ollama']['base_url']}")
        print(f"   ‚Ä¢ Batch size: {config['batch_size']}")
        print(f"   ‚Ä¢ R√©pertoire de sortie: {config['output_dir']}")
        print(f"   ‚Ä¢ Timeout: {config['ollama']['timeout']}s")
        print(f"   ‚Ä¢ Retry count: {config['ollama']['retry_count']}")
        
        print(f"\nüìÇ Cat√©gories activ√©es:")
        for category, settings in config['categories'].items():
            status = "‚úÖ" if settings['enabled'] else "‚ùå"
            print(f"   {status} {category} (CSS: {settings['css']})")
        
        print(f"\n‚úÖ Configuration charg√©e!")
        
    except Exception as e:
        print(f"‚ùå Erreur de configuration: {e}")


async def demo_complete():
    """D√©monstration compl√®te"""
    print("üöÄ D√âMONSTRATION COMPL√àTE DU G√âN√âRATEUR DE COURS")
    print("="*60)
    
    # Test du parser
    parsed_data = await demo_parser()
    
    # Test des prompts
    demo_prompts()
    
    # Test du g√©n√©rateur HTML
    demo_html_generator()
    
    # Test de la configuration
    demo_config()
    
    print("\n" + "="*60)
    print("üéØ R√âSUM√â DE LA D√âMONSTRATION")
    print("="*60)
    
    if parsed_data:
        stats = FrancaisParser().get_statistics(parsed_data)
        print(f"\n‚úÖ Syst√®me pr√™t pour traiter {stats['total_items']} √©l√©ments")
        print(f"   ‚Ä¢ Parser: ‚úÖ Op√©rationnel")
        print(f"   ‚Ä¢ Prompts: ‚úÖ Configur√©s")
        print(f"   ‚Ä¢ HTML Generator: ‚úÖ Fonctionnel")
        print(f"   ‚Ä¢ Configuration: ‚úÖ Charg√©e")
        
        print(f"\nüöÄ COMMANDES POUR D√âMARRER:")
        print(f"   ‚Ä¢ Test complet: python demo.py")
        print(f"   ‚Ä¢ G√©n√©ration r√©elle: python main.py -i ../francais_all.md")
        print(f"   ‚Ä¢ Aide: python main.py --help")
        
    else:
        print(f"\n‚ùå Probl√®me d√©tect√© - v√©rifier le fichier francais_all.md")
    
    print(f"\nüìö Prochaines √©tapes:")
    print(f"   1. Installer et d√©marrer Ollama")
    print(f"   2. T√©l√©charger un mod√®le (ollama pull gemma:7b)")
    print(f"   3. Lancer la g√©n√©ration")
    print(f"   4. V√©rifier les fichiers HTML g√©n√©r√©s")


if __name__ == "__main__":
    asyncio.run(demo_complete())